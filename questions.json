[{"question": " \u00bfCu\u00e1les son los paradigmas de programaci\u00f3n m\u00e1s importantes? Enum\u00e9relos y descr\u00edbalos.", "answer": "- Programaci\u00f3n imperativa: se describe en una secuencia de comandos almacenados en el ordenador como se debe implementar el programa para obtener la soluci\u00f3n deseada.\n    - Procedural: se utilizan procedimientos\n    - Estructurado: se utilizan sentencias de control e iterativas\n    - POO: se separan los datos\n- Programaci\u00f3n declarativa: est\u00e1 basado en el desarrollo de programas especificando un conjunto de condiciones, proposiciones, afirmaciones, restricciones, ecuaciones o transformaciones que describen el problema y detallan su soluci\u00f3n.\n    - Funcional: se eval\u00faan expresiones mediante funciones\n    - L\u00f3gico: se eval\u00faan reglas o cl\u00e1usulas de restricci\u00f3n\n    \n    > La\u00a0**programaci\u00f3n imperativa** describe qu\u00e9 pasos hay que dar (How?) para obtener la soluci\u00f3n de un problema La\u00a0**programaci\u00f3n declarativa** se enfoca en describe qu\u00e9/cu\u00e1l es (What?) la soluci\u00f3n si entrar en los detalles su control de flujo.\n    > \n\n"}, {"question": " \u00bfCu\u00e1l es la diferencia entre el lenguaje m\u00e1quina y el lenguaje ensamblador?", "answer": "El lenguaje m\u00e1quina es en binario y en el lenguaje ensamblador se usan instrucciones de bajo nivel.\n\n"}, {"question": " \u00bfEn qu\u00e9 sentido son los lenguajes de programaci\u00f3n de alto nivel mejores que el lenguaje ensamblador?", "answer": "Te proporcionan m\u00e1s abstracci\u00f3n y est\u00e1s m\u00e1s cerca del lenguaje natural.\n\n"}, {"question": " En qu\u00e9 circunstancias no tiene sentido programar en ensamblador.", "answer": "Siempre y cuando el rendimiento no sea prioridad, no se deber\u00eda programar en ensamblador ya\nque la curva de aprendizaje y aplicaci\u00f3n en el tiempo es considerablemente mucho m\u00e1s alta\nrespecto a lenguajes de alto nivel.\n\n"}, {"question": " \u00bfPor qu\u00e9 hay tantos lenguajes de programaci\u00f3n?", "answer": "> Porque hay muchos \u00e1mbitos que cubrir, matem\u00e1ticas, finanzas\u2026\n> \n\n> Tanto por evoluci\u00f3n hist\u00f3rica como por prop\u00f3sito espec\u00edfico.\n> \n\n"}, {"question": " \u00bfQu\u00e9 hace un lenguaje de programaci\u00f3n tenga \u00e9xito?", "answer": "Tiene que tener muchos usuarios que lo usen y la curva de aprendizaje tiene que ser peque\u00f1a.\n\n"}, {"question": " Nombre dos lenguajes de cada una de las siguientes categor\u00edas:", "answer": "- von Neumann: C, Fortran\n- orientado a objetos: Ruby, C++\n- concurrente: Ada, Erlang\n- funcional: Lisp, FP\n- l\u00f3gico: Prolog, Datalog\n\n"}, {"question": " \u00bfQu\u00e9 distingue a los lenguajes declarativos de los lenguajes imperativos?", "answer": "En los lenguajes declarativos se especifica lo que se quiere obtener como resultado deseado y en los lenguajes de programaci\u00f3n imperativos se define la secuencia de operaciones a realizar para obtener el resultado.\n\n"}, {"question": " \u00bfQu\u00e9 organizaci\u00f3n se encarga de la diseminaci\u00f3n y desarrollo del lenguaje de programaci\u00f3n Ada?", "answer": "El Departamento de Defensa de los Estados Unidos (DoD).\n\n"}, {"question": " \u00bfCu\u00e1l se considera el primer lenguaje de programaci\u00f3n?", "answer": "Fortran\n\n"}, {"question": " \u00bfCu\u00e1l se considera el primer lenguaje funcional?", "answer": "Lisp\n\n"}, {"question": " \u00bfPor qu\u00e9 los lenguajes concurrentes no se consideran una categor\u00eda aparte en la clasificaci\u00f3n de los lenguajes dada?", "answer": "Porque son lenguajes que no tienen caracter\u00edsticas espec\u00edficas y utilizan caracter\u00edsticas del SO.\n\n"}, {"question": " Proponga tres codificaciones con tres tipos de lenguajes de programaci\u00f3n: uno imperativo, otro funcional y uno l\u00f3gico, para:", "answer": ""}, {"question": " a) el algoritmo de Euclides para calcular el m\u00e1ximo com\u00fan divisor entre dos n\u00fameros.", "answer": "```jsx\ndef gcd_imperative(a, b)\n    while b != 0\n        temp = b\n        b = a % b\n        a = temp\n    end\n    return a\nend\n```\n\n```jsx\ndef gcd_functional(a, b)\n    (b == 0) ? a : gcd_functional(b, a % b)\nend\n```\n\n```jsx\nfrom sympy import *\n\ndef gcd_logic(a, b):\n    return gcd(a, b)\n```\n\n"}, {"question": " b) el algoritmo para calcular un n\u00famero dado de n\u00fameros de Fibonacci.", "answer": "```jsx\ndef fibonacci_imperative(n)\n    a = 0\n    b = 1\n    for i in range(n):\n        temp = a\n        a = b\n        b = temp + b\n    return a\nend\n```\n\n```jsx\ndef fibonacci_functional(n)\n    (n <= 1) ? n : fibonacci_functional(n-1) + fibonacci_functional(n-2)\nend\n```\n\n```jsx\nfrom sympy import *\n\ndef fibonacci_logic(n):\n    return fibonacci(n)\n```\n\n"}, {"question": " c) el algoritmo para calcular el factorial de un n\u00famero.", "answer": "```jsx\ndef factorial_imperative(n)\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\nend\n```\n\n```jsx\ndef factorial_functional(n)\n    (n <= 1) ? 1 : n * factorial_functional(n - 1)\nend\n```\n\n```jsx\nfrom sympy import *\n\ndef factorial_logic(n):\n    return factorial(n)\n```\n\n"}, {"question": " Describa las principales caracter\u00edsticas de los lenguajes de programaci\u00f3n seleccionados en la pregunta 13.", "answer": "- Imperativo: Este tipo de lenguaje se enfoca en c\u00f3mo se deben realizar las tareas, es decir, en los procedimientos o procesos para alcanzar un resultado.\n- Funcional: Este tipo de lenguaje se enfoca en qu\u00e9 se debe hacer, es decir, en las funciones matem\u00e1ticas que se deben aplicar para alcanzar un resultado\n- L\u00f3gico: Este tipo de lenguaje se enfoca en la representaci\u00f3n de conocimiento y en la resoluci\u00f3n de problemas mediante la deducci\u00f3n l\u00f3gica.\n\n"}, {"question": " Explique por qu\u00e9 se distingue entre compilaci\u00f3n e interpretaci\u00f3n.", "answer": "Porque en compilaci\u00f3n se ejecuta el paquete completo de c\u00f3digo y en la interpretaci\u00f3n se ejecuta l\u00ednea a l\u00ednea.\n\n"}, {"question": " \u00bfCu\u00e1les son las ventajas y desventajas de la compilaci\u00f3n frente a la interpretaci\u00f3n?", "answer": "En la compilaci\u00f3n se crea un paquete de c\u00f3digo para ejecutar y no se tiene que crear el paquete cada vez que se ejecuta, pero cuando hay un cambio se tiene que generar todo de nuevo. En la interpretaci\u00f3n el proceso de ejecuci\u00f3n es m\u00e1s costoso porque se ejecuta completo cada vez.\n\n"}, {"question": " \u00bfQu\u00e9 modelo sigue Java? \u00bfcompilado, interpretado, ambos? \u00bfC\u00f3mo se puede saber?", "answer": "El modelo de Java sigue ambos modelos.\nEl c\u00f3digo fuente es compilado a c\u00f3digo m\u00e1quina. Posteriormente, para que se puede ejecutar\nsobre cualquier plataforma, la m\u00e1quina virtual de Java hace de int\u00e9rprete de ese c\u00f3digo en\ntiempo real generando la ejecuci\u00f3n del programa.\n\n"}, {"question": " \u00bfQu\u00e9 modelo sigue Ruby? \u00bfcompilado, interpretado, ambos? \u00bfC\u00f3mo se puede saber?", "answer": "Ruby es un lenguaje interpretado.\nEl int\u00e9rprete de Ruby traduce l\u00ednea por l\u00ednea mientras va ejecutando el c\u00f3digo.\n\n"}, {"question": " \u00bfQu\u00e9 es un compilador?", "answer": "Es un programa que se encarga de convertir lenguaje de alto nivel en lenguaje m\u00e1quina.\n\n"}, {"question": " \u00bfQu\u00e9 es un int\u00e9rprete?", "answer": "Es un programa que se encarga de ejecutar l\u00ednea a l\u00ednea el c\u00f3digo, se encarga de analizar y ejecutar un programa.\n\n"}, {"question": " Diferencia entre sistema de control de versiones centralizado y distribuido.", "answer": "En el centralizado hay un servidor con todos los datos y en distribuido los clientes replican constantemente el repositorio.\n\n"}, {"question": " \u00bfQu\u00e9 es Git?", "answer": "Es un sistema de control de versiones.\n\nEs un software o plataforma encargado de realizar un seguimiento de los cambios realizados en el c\u00f3digo a largo plazo."}]